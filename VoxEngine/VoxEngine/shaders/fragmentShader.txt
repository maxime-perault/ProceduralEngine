#version 330

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

in vec4 shadowCoords;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform sampler2D shadowMap;

uniform vec3 lightColour;
uniform float shineDamper;
uniform float AmbientLevel;

uniform	float rawColour;
uniform vec3 colour;

const int pcfCount = 4;
const float totalTexels = (pcfCount * 2.0 + 1.0) * (pcfCount * 2.0 + 1.0);
const float mapSize = 2048.0;
const float texelSize = 1.0 / mapSize;

/*
** dot product for a and b
** -> a.x * b.x + a.y * b.y + a.z * b.z
*/
void main(void)
{
	if (rawColour != 0)
		out_Color = vec4(colour, 1.0);
	else
	{
		if (texture(textureSampler, pass_textureCoords).a != 1.0)
			discard;

	float bias = 0.005;
	float lightFactor = 1.0;
	float objectNearestLight;
	float totalshadow = 0.0;

	for (int x = -pcfCount; x <= pcfCount; ++x)
	{
		for (int y = -pcfCount; y <= pcfCount; ++y)
		{
			objectNearestLight = texture(shadowMap, shadowCoords.xy + vec2(x, y) * texelSize).r;
			if (objectNearestLight < (shadowCoords.z - bias))
		  	{
		  		totalshadow += 1;
		  	}
		}
	}
	totalshadow /= totalTexels;
	lightFactor = 1.0 - (totalshadow * shadowCoords.w);
  	

	 /*
	 ** normalize the light and normal vectors to compare them
	 */
	 vec3 unitNormal = normalize(surfaceNormal);
	 vec3 unitLightVector = normalize(toLightVector);

	 /*
	 ** Dot product to know the diffuse light factor
	 */
	 float nDot1 = dot(unitNormal, unitLightVector);
	 float brightness = max(nDot1, 0.0);

	 vec3 diffuse = brightness * lightColour;

	 vec4 totalDiffuse = vec4(diffuse * (1 - AmbientLevel) + AmbientLevel, 1.0);

	 totalDiffuse.rgb = max(lightFactor * totalDiffuse.rgb, 0.4);

	 /*
	 ** normalize vector from the vertex to the camera
	 ** + reflected vector from the light by the normal
	 */

	 /*
	 vec3 unitVectorToCamera = normalize(toCameraVector);
	 vec3 lightDirection = -unitLightVector;
	 vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
	 */

	 /*
	 ** Dot product to know the brightness of the specular factor
	 */
	 /*
	 float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
	 specularFactor = max(specularFactor, 0.0);
	 float dampedFActor = pow(specularFactor, shineDamper);
	 vec3 finalSpecular = dampedFActor * lightColour;
	 */

	 out_Color = totalDiffuse * texture(textureSampler, pass_textureCoords); // + vec4(finalSpecular, 1.0);
	}
}