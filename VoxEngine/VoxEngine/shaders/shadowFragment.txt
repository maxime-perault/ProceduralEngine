#version 140

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColour;
uniform float shineDamper;
uniform float AmbientLevel;

uniform	float rawColour;
uniform vec3 colour;

/*
** dot product for a and b
** -> a.x * b.x + a.y * b.y + a.z * b.z
*/
void main(void)
{
	if (rawColour != 0)
		out_Color = vec4(colour, 1.0);
	else
	{
		if (texture(textureSampler, pass_textureCoords).a < 0.5)
			discard;
	 /*
	 ** normalize the light and normal vectors to compare them
	 */
	 vec3 unitNormal = normalize(surfaceNormal);
	 vec3 unitLightVector = normalize(toLightVector);

	 /*
	 ** Dot product to know the diffuse light factor
	 */
	 float nDot1 = dot(unitNormal, unitLightVector);
	 float brightness = max(nDot1, 0.0);
	 vec3 diffuse = brightness * lightColour;

	 /*
	 ** normalize vector from the vertex to the camera
	 ** + reflected vector from the light by the normal
	 */

	 /*
	 vec3 unitVectorToCamera = normalize(toCameraVector);
	 vec3 lightDirection = -unitLightVector;
	 vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
	 */

	 /*
	 ** Dot product to know the brightness of the specular factor
	 */
	 /*
	 float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
	 specularFactor = max(specularFactor, 0.0);
	 float dampedFActor = pow(specularFactor, shineDamper);
	 vec3 finalSpecular = dampedFActor * lightColour;
	 */

	 out_Color = vec4(diffuse * (1 - AmbientLevel) + AmbientLevel, 1.0) * texture(textureSampler, pass_textureCoords); // + vec4(finalSpecular, 1.0);
	}
}